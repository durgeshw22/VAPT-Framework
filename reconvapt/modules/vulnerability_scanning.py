#!/usr/bin/env python3
"""
RECON VAPT Framework - Vulnerability Scanning Module  
3 tools: nuclei, nikto, sqlmap
"""

import os
import subprocess
import time
from colorama import Fore, Style
from utils.helpers import create_output_dir, check_tool_installed, validate_url

class VulnerabilityScanning:
    def __init__(self):
        self.tools = {
            "1": {
                "name": "nuclei",
                "description": "Template-based vulnerability scanner",
                "command": "nuclei -u {url} -o {output}",
                "install": "go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest"
            },
            "2": {
                "name": "nikto",
                "description": "Web server vulnerability scanner",
                "command": "nikto -h {url} -o {output}",
                "install": "apt-get install nikto"
            },
            "3": {
                "name": "sqlmap",
                "description": "SQL injection detection tool",
                "command": "sqlmap -u '{url}' --batch --random-agent",
                "install": "apt-get install sqlmap"
            }
        }
    
    def show_menu(self):
        print(f"\n{Fore.YELLOW}╔══════════════════════════════════════════════════════════╗")
        print(f"{Fore.YELLOW}║        VULNERABILITY SCANNING - Tool Selection           ║")
        print(f"{Fore.YELLOW}╚══════════════════════════════════════════════════════════╝{Style.RESET_ALL}")
        for key, tool in self.tools.items():
            print(f"{Fore.CYAN}[{key}]{Fore.WHITE} {tool['name']:<12} - {tool['description']}")
        print(f"{Fore.RED}[0] Back to Main Menu{Style.RESET_ALL}")
    
    def install_tool(self, tool_info):
        print(f"{Fore.YELLOW}[!] {tool_info['name']} not installed")
        choice = input(f"{Fore.WHITE}Install now? (y/n): {Style.RESET_ALL}").strip().lower()
        if choice != 'y':
            return False
        
        try:
            env = os.environ.copy()
            go_bin = os.path.expanduser("~/go/bin")
            env['PATH'] = f"{go_bin}:{env.get('PATH', '')}"
            env['GOPATH'] = env.get('GOPATH', os.path.expanduser("~/go"))
            
            process = subprocess.run(tool_info['install'], shell=True, capture_output=True,
                                   text=True, timeout=300, env=env)
            if process.returncode == 0:
                print(f"{Fore.GREEN}[✓] Installed!{Style.RESET_ALL}")
                return True
            return False
        except:
            return False
    
    def run_tool(self, tool_info, url, output_file):
        print(f"\n{Fore.CYAN}[*] Running {tool_info['name']} on {url}...{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Output will be saved to: {output_file}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] This may take a while... Press Ctrl+C to cancel{Style.RESET_ALL}\n")
        
        command = tool_info['command'].format(url=url, output=output_file)
        tool_check = check_tool_installed(tool_info['name'])
        if isinstance(tool_check, str):
            command = command.replace(tool_info['name'], tool_check)
        
        start_time = time.time()
        try:
            # Show live output for better user experience (no capture_output)
            process = subprocess.run(command, shell=True, timeout=1800)
            elapsed = round(time.time() - start_time, 2)
            
            if process.returncode == 0 or os.path.exists(output_file):
                print(f"\n{Fore.GREEN}[✓] Completed in {elapsed}s{Style.RESET_ALL}")
                print(f"{Fore.GREEN}[✓] Results saved to: {output_file}{Style.RESET_ALL}")
                return True
            else:
                print(f"\n{Fore.YELLOW}[!] Process completed with return code: {process.returncode}{Style.RESET_ALL}")
                if os.path.exists(output_file):
                    print(f"{Fore.GREEN}[✓] Results still saved to: {output_file}{Style.RESET_ALL}")
                return False
        except subprocess.TimeoutExpired:
            print(f"\n{Fore.RED}[!] Scan timeout (30 minutes){Style.RESET_ALL}")
            return False
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}[!] Scan cancelled by user{Style.RESET_ALL}")
            return False
    
    def run(self):
        while True:
            self.show_menu()
            choice = input(f"\n{Fore.WHITE}Select [0-3]: {Style.RESET_ALL}").strip()
            
            if choice == '0':
                break
            if choice not in ['1', '2', '3']:
                continue
            
            url = input(f"{Fore.WHITE}Enter URL: {Style.RESET_ALL}").strip()
            url = validate_url(url)
            if not url:
                print(f"{Fore.RED}[!] Invalid URL{Style.RESET_ALL}")
                continue
            
            domain = url.replace('http://', '').replace('https://', '').split('/')[0]
            output_dir = create_output_dir(f"vuln_{domain}")
            tool_info = self.tools[choice]
            
            if not check_tool_installed(tool_info['name']):
                if not self.install_tool(tool_info):
                    continue
            
            output_file = os.path.join(output_dir, f"{tool_info['name']}_results.txt")
            
            # SQLMap saves to its own directory structure, inform user
            if choice == '3':
                print(f"{Fore.YELLOW}[*] Note: SQLMap saves results to ~/.local/share/sqlmap/output/{Style.RESET_ALL}")
            
            self.run_tool(tool_info, url, output_file)
            input(f"\n{Fore.YELLOW}Press Enter...{Style.RESET_ALL}")

if __name__ == "__main__":
    module = VulnerabilityScanning()
    module.run()
